.include lib
.include compat

PROJ = sdmsh

## Path to the AR program
AR ?= ar

## Path to the C Compiler
CC ?= cc

## Default C Compiler Flags
CFLAGS ?= -std=gnu99 -O2 -Wall -Wextra

## Default Linker Flags
LDFLAGS ?=

## Enable compatibility with readline version 6
COMPAT_READLINE6 ?= 0

## Compile ${PROJ} statically
BUILD_STATIC_BIN ?= 0

# Comment this if you do not want checking with address sanitize
# NOTE: you can use shell variable ASAN_OPTIONS=fast_unwind_on_malloc=false before run sdmsh
# also read https://github.com/google/sanitizers/wiki/AddressSanitizerFlags#run-time-flags
## Build ${PROJ} with address sanitizers enabled
WITH_ADDRESS_SANITIZE ?= 0

## Installation prefix
PREFIX ?= /usr/local

SRC = sdmsh.c sdmsh_commands.c shell.c shell_history.c shell_completion.c shell_help.c
OBJ = ${SRC:.c=.o}
OS != uname

.if "${BUILD_STATIC_BIN}"
STATIC = --static
.endif

.if "${OS}" == "OpenBSD"
RLINC = -I/usr/local/include/ereadline -DHAVE_STRING_H
RLLIB = -L/usr/local/lib -lereadline
.else
RLINC != pkg-config --cflags readline
RLLIB != pkg-config --libs ${STATIC} readline
.endif

CFLAGS += -I$. -I$./lib/libsdm -I$./lib/libstream -ggdb -DLOGGER_ENABLED -fPIC ${RLINC}

.if "${WITH_ADDRESS_SANITIZE}" && "${OS}" != "OpenBSD"
CFLAGS	+= -fsanitize=address
LDFLAGS	+= -fsanitize=address
.endif

.if "${COMPAT_READLINE6}" == "1"
OBJ	+= compat/readline6.o
CFLAGS	+= -DCOMPAT_READLINE6
.endif

LDFLAGS += -lncurses ${RLLIB}
LDFLAGS += -Llib/libsdm -lsdm
LDFLAGS += -Llib/libstream -lstream

.if "${BUILD_STATIC_BIN}"
LDFLAGS += -static
.endif

# Rules

## Build sdmsh
all: ${PROJ}

## Delete all build artifacts
clean: lib/clean compat/clean
	rm -f ${PROJ} *.o *.so *.core

## Install sdmsh and shared libraries
install: sdmsh lib/install
	mkdir -p ${DESTDIR}${PREFIX}/bin
	cp -f sdmsh ${DESTDIR}${PREFIX}/bin/

## Delete even more things
distclean: clean
	rm -f cscope.out tags make/mk

sdmsh: ${OBJ} lib/libsdm/libsdm.a lib/libstream/libstream.a
	${CC} -o $@ ${OBJ} ${CFLAGS} ${LDFLAGS}

.c.o:
	${CC} -c -o $@ $< ${CFLAGS}

# Template for library dependencies
.template lib
OBJ = ${SRC:.c=.o}

## Build both the static and shared library for ${PROJ}
all: ${PROJ}.a ${PROJ}.so

## Remove all build artifacts for ${PROJ}
clean:
	rm -f ${PROJ}.a ${PROJ}.so *.o

.if target(clean-extra)
clean: clean-extra
.endif

## Install ${PROJ}.so into ${DESTDIR}${PREFIX}/lib/
install: ${PROJ}.so
	mkdir -p ${DESTDIR}${PREFIX}/lib
	cp -f ${PROJ}.so ${DESTDIR}${PREFIX}/lib/

## Build ${PROJ}'s static library
${PROJ}.a: ${OBJ}
	${AR} rcs $@ ${OBJ}

## Build ${PROJ}'s shared library
${PROJ}.so: ${OBJ}
	${CC} -shared -o $@ ${OBJ} ${CFLAGS}
.endt

.export AR
.export CC
.export CFLAGS
.export LDFLAGS
.export PREFIX
